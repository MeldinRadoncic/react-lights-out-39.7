{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\16462\\\\Desktop\\\\react-lights-out\\\\src\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board(_ref) {\n  _s();\n\n  let {\n    nrows = 7,\n    ncols = 4,\n    chanceLightStartsOn = 0.25\n  } = _ref;\n  const [board, setBoard] = useState(createBoard());\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  function createBoard() {\n    let initialBoard = []; // TODO: create array-of-arrays of true/false values\n\n    for (let y = 0; y < nrows; y++) {\n      let row = [];\n\n      for (let x = 0; x < ncols; x++) {\n        row.push(Math.random() < chanceLightStartsOn);\n      }\n\n      initialBoard.push(row);\n    }\n\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    return board.every(row => row.every(cell => !cell));\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      }; // TODO: Make a (deep) copy of the oldBoard\n\n\n      const boardCopy = oldBoard.map(row => [...row]); // TODO: in the copy, flip this cell and the cells around it\n\n      flipCell(y, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy); // TODO: return the copy\n\n      return boardCopy;\n    });\n  } // if the game is won, just show a winning msg & render nothing else\n\n\n  if (hasWon()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"You Win!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 12\n    }, this);\n  } // TODO\n  // make table board\n  // TODO\n\n}\n\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","Board","nrows","ncols","chanceLightStartsOn","board","setBoard","createBoard","initialBoard","y","row","x","push","Math","random","hasWon","every","cell","flipCellsAround","coord","oldBoard","split","map","Number","flipCell","boardCopy"],"sources":["C:/Users/16462/Desktop/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\n\n\n\nfunction Board({ nrows=7, ncols=4, chanceLightStartsOn=0.25 }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let y = 0; y < nrows; y++) {\n      let row = [];\n      for (let x = 0; x < ncols; x++) {\n        row.push(Math.random() < chanceLightStartsOn);\n      }\n      initialBoard.push(row);\n    }\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    return board.every(row => row.every(cell => !cell));\n\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      }\n\n    \n  \n\n      // TODO: Make a (deep) copy of the oldBoard\n      const boardCopy = oldBoard.map(row => [...row]);\n\n\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n\n      // TODO: return the copy\n      return boardCopy;\n\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  if (hasWon()) {\n    return <div>You Win!</div>;\n  }\n  // TODO\n\n  // make table board\n\n  // TODO\n}\n\n\n\nexport default Board;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAKA,SAASC,KAAT,OAA+D;EAAA;;EAAA,IAAhD;IAAEC,KAAK,GAAC,CAAR;IAAWC,KAAK,GAAC,CAAjB;IAAoBC,mBAAmB,GAAC;EAAxC,CAAgD;EAC7D,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAACQ,WAAW,EAAZ,CAAlC;EAEA;;EACA,SAASA,WAAT,GAAuB;IACrB,IAAIC,YAAY,GAAG,EAAnB,CADqB,CAErB;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAApB,EAA2BO,CAAC,EAA5B,EAAgC;MAC9B,IAAIC,GAAG,GAAG,EAAV;;MACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,KAApB,EAA2BQ,CAAC,EAA5B,EAAgC;QAC9BD,GAAG,CAACE,IAAJ,CAASC,IAAI,CAACC,MAAL,KAAgBV,mBAAzB;MACD;;MACDI,YAAY,CAACI,IAAb,CAAkBF,GAAlB;IACD;;IACD,OAAOF,YAAP;EACD;;EAED,SAASO,MAAT,GAAkB;IAChB;IACA,OAAOV,KAAK,CAACW,KAAN,CAAYN,GAAG,IAAIA,GAAG,CAACM,KAAJ,CAAUC,IAAI,IAAI,CAACA,IAAnB,CAAnB,CAAP;EAED;;EAED,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;IAC9Bb,QAAQ,CAACc,QAAQ,IAAI;MACnB,MAAM,CAACX,CAAD,EAAIE,CAAJ,IAASQ,KAAK,CAACE,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAAf;;MAEA,MAAMC,QAAQ,GAAG,CAACf,CAAD,EAAIE,CAAJ,EAAOc,SAAP,KAAqB;QACpC;QAEA,IAAId,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGR,KAAd,IAAuBM,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGP,KAAzC,EAAgD;UAC9CuB,SAAS,CAAChB,CAAD,CAAT,CAAaE,CAAb,IAAkB,CAACc,SAAS,CAAChB,CAAD,CAAT,CAAaE,CAAb,CAAnB;QACD;MACF,CAND,CAHmB,CAcnB;;;MACA,MAAMc,SAAS,GAAGL,QAAQ,CAACE,GAAT,CAAaZ,GAAG,IAAI,CAAC,GAAGA,GAAJ,CAApB,CAAlB,CAfmB,CAkBnB;;MACAc,QAAQ,CAACf,CAAD,EAAIE,CAAJ,EAAOc,SAAP,CAAR;MACAD,QAAQ,CAACf,CAAD,EAAIE,CAAC,GAAG,CAAR,EAAWc,SAAX,CAAR;MACAD,QAAQ,CAACf,CAAD,EAAIE,CAAC,GAAG,CAAR,EAAWc,SAAX,CAAR;MACAD,QAAQ,CAACf,CAAC,GAAG,CAAL,EAAQE,CAAR,EAAWc,SAAX,CAAR;MACAD,QAAQ,CAACf,CAAC,GAAG,CAAL,EAAQE,CAAR,EAAWc,SAAX,CAAR,CAvBmB,CAyBnB;;MACA,OAAOA,SAAP;IAED,CA5BO,CAAR;EA6BD,CArD4D,CAuD7D;;;EACA,IAAIV,MAAM,EAAV,EAAc;IACZ,oBAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EACD,CA1D4D,CA2D7D;EAEA;EAEA;;AACD;;GAhEQd,K;;KAAAA,K;AAoET,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}